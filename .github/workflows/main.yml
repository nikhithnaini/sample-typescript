name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Triggers when code is pushed to the main branch
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install

    - name: Build the app
      run: npm run build

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Register Microsoft.App Provider
      run: az provider register -n Microsoft.App --wait

    - name: Check if ACR exists, create if not
      id: acr_check
      run: |
        ACR_EXISTS=$(az acr show --name ${{ secrets.REGISTRY_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query "name" --output tsv || echo "notfound")
        if [[ "$ACR_EXISTS" == "notfound" ]]; then
          echo "ACR not found. Creating..."
          az acr create --name ${{ secrets.REGISTRY_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --sku Basic
        else
          echo "ACR already exists."
        fi

    - name: Build and Push Docker Image to ACR
      run: |
        IMAGE_TAG=${{ secrets.REGISTRY_NAME }}.azurecr.io/myapp:${{ github.sha }}
        az acr login --name ${{ secrets.REGISTRY_NAME }}
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Ensure Azure Container App Environment exists
      run: |
        ENV_EXISTS=$(az containerapp env show --name ${{ secrets.APP_ENVIRONMENT }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query "name" --output tsv || echo "notfound")
        if [ "$ENV_EXISTS" == "notfound" ]; then
          echo "Creating environment..."
          az containerapp env create --name ${{ secrets.APP_ENVIRONMENT }} --resource-group ${{ secrets.RESOURCE_GROUP }} --location ${{ secrets.LOCATION }}
        else
          echo "Environment already exists."
        fi

    - name: Deploy Azure Container App (First-time Setup)
      run: |
        APP_EXISTS=$(az containerapp show --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query "name" --output tsv || echo "notfound")
        if [ "$APP_EXISTS" == "notfound" ]; then
          echo "Creating Azure Container App..."
          az containerapp create \
            --name ${{ secrets.APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --environment ${{ secrets.APP_ENVIRONMENT }} \
            --cpu 0.5 --memory 1.0Gi \
            --ingress external --target-port 3000 \
            --registry-server ${{ secrets.REGISTRY_NAME }}.azurecr.io \
            --system-assigned
        else
          echo "Azure Container App already exists."
        fi

    - name: Grant ACRPull Role to Container App Managed Identity
      run: |
        echo "Retrieving Managed Identity Principal ID..."
        PRINCIPAL_ID=$(az containerapp show --name ${{ secrets.APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query "identity.principalId" --output tsv)
        
        if [ -z "$PRINCIPAL_ID" ]; then
          echo "ERROR: Managed Identity not found for Container App!"
          exit 1
        fi

        echo "Granting ACRPull role to Managed Identity..."
        az role assignment create --assignee $PRINCIPAL_ID --scope $(az acr show --name ${{ secrets.REGISTRY_NAME }} --query "id" --output tsv) --role AcrPull

    - name: Deploy Azure Container App (Update with Image)
      run: |
        echo "Updating Azure Container App with new image..."
        az containerapp update \
          --name ${{ secrets.APP_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ${{ secrets.REGISTRY_NAME }}.azurecr.io/myapp:${{ github.sha }}

    - name: Configure scaling and idle timeout
      run: |
        az containerapp update \
          --name ${{ secrets.APP_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --min-replicas 0 --max-replicas 5
